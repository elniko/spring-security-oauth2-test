/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.example.testresourceservice.stet.api;

import com.example.testresourceservice.stet.model.*;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-08-13T16:28:50.109+02:00")

@Api(value = "payment-requests", description = "the payment-requests API")
public interface PaymentRequestsApi {

    @ApiOperation(value = "The PISP confirms its payment  request", notes = "The PISP confirms the previously posted payment  request.  The ASPSP answers with a status of the relevant request. ", response = HalPaymentRequest.class, authorizations = {
        @Authorization(value = "clientCredentials", scopes = {
            @AuthorizationScope(scope = "pisp", description = "Access by a PISP to payments resources")
            })
    }, tags={ "PISP", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "retrieval of the Payment Request enriched with the status report", response = HalPaymentRequest.class),
        @ApiResponse(code = 400, message = "Invalid status value", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized, authentication failure.", response = ErrorModel.class),
        @ApiResponse(code = 403, message = "Forbidden, authentication successful but access to resource is not allowed.", response = ErrorModel.class),
        @ApiResponse(code = 405, message = "Method Not Allowed.", response = ErrorModel.class),
        @ApiResponse(code = 406, message = "Not Acceptable.", response = ErrorModel.class),
        @ApiResponse(code = 408, message = "Request Timeout.", response = ErrorModel.class),
        @ApiResponse(code = 429, message = "Too many requests.", response = ErrorModel.class),
        @ApiResponse(code = 500, message = "Internal server error.", response = ErrorModel.class),
        @ApiResponse(code = 503, message = "Service unavailable.", response = ErrorModel.class) })
    
    @RequestMapping(value = "/payment-requests/{paymentRequestResourceId}/confirmation",
        produces = { "application/hal+json; charset=utf-8", "application/json; charset=utf-8" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<HalPaymentRequest> paymentRequestConfirmationPost(@ApiParam(value = "Access token to be passed as a header", required = true) @RequestHeader(value = "Authorization", required = true) String authorization, @ApiParam(value = "Identification of the Payment Request Resource", required = true) @PathVariable("paymentRequestResourceId") String paymentRequestResourceId, @ApiParam(value = "http-signature of the request (cf. https://datatracker.ietf.org/doc/draft-cavage-http-signatures/) The keyId part of the header should be formatted as follows   keiId=\"SN=XXX,CA=YYYYYYYYYYYYYYYY\" where   \"XXX\" is the serial number, in hexadecimal without any prefix (like 0x), of the QSEAL certificate whose relevant private key was used for signing   \"YYYYYYYYYYYYYYYY\" is the the Issuer DN, full Distinguished Name of the Certification Authority having issued this certificate HTTP400 will be returned by the server in case of invalid or absent signature ", required = true) @RequestHeader(value = "Signature", required = true) String signature, @ApiParam(value = "Correlation header to be set in a request and retrieved in the relevant response ", required = true) @RequestHeader(value = "X-Request-ID", required = true) String xRequestID, @ApiParam(value = "parameters needed for confirmation of the Payment or Transfer Request, especially in EMBEDDED approach") @Valid @RequestBody PaymentTransferRequestConfirmationResource confirmationRequest, @ApiParam(value = "IP address used by the PSU's terminal when connecting to the TPP") @RequestHeader(value = "PSU-IP-Address", required = false) String psUIPAddress, @ApiParam(value = "IP port used by the PSU's terminal when connecting to the TPP") @RequestHeader(value = "PSU-IP-Port", required = false) String psUIPPort, @ApiParam(value = "Http method for the most relevant PSUâ€™s terminal request to the TTP") @RequestHeader(value = "PSU-HTTP-Method", required = false) String psUHTTPMethod, @ApiParam(value = "Timestamp of the most relevant PSUâ€™s terminal request to the TTP") @RequestHeader(value = "PSU-Date", required = false) String psUDate, @ApiParam(value = "Geographical location of the PSU as provided by the PSU mobile terminal if any to the TPP") @RequestHeader(value = "PSU-GEO-Location", required = false) String psUGEOLocation, @ApiParam(value = "\"User-Agent\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-User-Agent", required = false) String psUUserAgent, @ApiParam(value = "\"Referer\" header field sent by the PSU terminal when connecting to the TPP. Notice that an initial typo in RFC 1945 specifies that \"referer\" (incorrect spelling) is to be used. The correct spelling \"referrer\" can be used but might not be understood. ") @RequestHeader(value = "PSU-Referer", required = false) String psUReferer, @ApiParam(value = "\"Accept\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept", required = false) String psUAccept, @ApiParam(value = "\"Accept-Charset\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept-Charset", required = false) String psUAcceptCharset, @ApiParam(value = "\"Accept-Encoding\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept-Encoding", required = false) String psUAcceptEncoding, @ApiParam(value = "\"Accept-Language\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept-Language", required = false) String psUAcceptLanguage, @ApiParam(value = "Digest of the body") @RequestHeader(value = "Digest", required = false) String digest);


    @ApiOperation(value = "retrieves a Payment Request previously posted on a PSU account on behalf of a merchant", notes = "The PISP has sent a Payment Request through a POST command. The ASPSP has registered the Payment Request, updated if necessary the relevant identifiers in order to avoid duplicates and returned the location of the updated Payment Request. The PISP get the Payment Request that might have been updated with the resource identifiers, the status of the Payment Request and the status of the subsequent credit transfer. ", response = HalPaymentRequest.class, authorizations = {
        @Authorization(value = "clientCredentials", scopes = {
            @AuthorizationScope(scope = "pisp", description = "Access by a PISP to payments resources")
            })
    }, tags={ "PISP", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Retrieval of the previously posted Payment Request", response = HalPaymentRequest.class),
        @ApiResponse(code = 400, message = "Invalid status value", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized, authentication failure.", response = ErrorModel.class),
        @ApiResponse(code = 403, message = "Forbidden, authentication successful but access to resource is not allowed.", response = ErrorModel.class),
        @ApiResponse(code = 404, message = "Not found, no request available.", response = ErrorModel.class),
        @ApiResponse(code = 405, message = "Method Not Allowed.", response = ErrorModel.class),
        @ApiResponse(code = 406, message = "Not Acceptable.", response = ErrorModel.class),
        @ApiResponse(code = 408, message = "Request Timeout.", response = ErrorModel.class),
        @ApiResponse(code = 429, message = "Too many requests.", response = ErrorModel.class),
        @ApiResponse(code = 500, message = "Internal server error.", response = ErrorModel.class),
        @ApiResponse(code = 503, message = "Service unavailable.", response = ErrorModel.class) })

    @RequestMapping(value = "/payment-requests/{paymentRequestResourceId}",
        produces = { "application/hal+json; charset=utf-8", "application/json; charset=utf-8" },
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<HalPaymentRequest> paymentRequestsGet(@ApiParam(value = "Access token to be passed as a header", required = true) @RequestHeader(value = "Authorization", required = true) String authorization, @ApiParam(value = "Identification of the Payment Request Resource", required = true) @PathVariable("paymentRequestResourceId") String paymentRequestResourceId, @ApiParam(value = "http-signature of the request (cf. https://datatracker.ietf.org/doc/draft-cavage-http-signatures/) The keyId part of the header should be formatted as follows   keiId=\"SN=XXX,CA=YYYYYYYYYYYYYYYY\" where   \"XXX\" is the serial number, in hexadecimal without any prefix (like 0x), of the QSEAL certificate whose relevant private key was used for signing   \"YYYYYYYYYYYYYYYY\" is the the Issuer DN, full Distinguished Name of the Certification Authority having issued this certificate HTTP400 will be returned by the server in case of invalid or absent signature ", required = true) @RequestHeader(value = "Signature", required = true) String signature, @ApiParam(value = "Correlation header to be set in a request and retrieved in the relevant response ", required = true) @RequestHeader(value = "X-Request-ID", required = true) String xRequestID, @ApiParam(value = "IP address used by the PSU's terminal when connecting to the TPP") @RequestHeader(value = "PSU-IP-Address", required = false) String psUIPAddress, @ApiParam(value = "IP port used by the PSU's terminal when connecting to the TPP") @RequestHeader(value = "PSU-IP-Port", required = false) String psUIPPort, @ApiParam(value = "Http method for the most relevant PSUâ€™s terminal request to the TTP") @RequestHeader(value = "PSU-HTTP-Method", required = false) String psUHTTPMethod, @ApiParam(value = "Timestamp of the most relevant PSUâ€™s terminal request to the TTP") @RequestHeader(value = "PSU-Date", required = false) String psUDate, @ApiParam(value = "Geographical location of the PSU as provided by the PSU mobile terminal if any to the TPP") @RequestHeader(value = "PSU-GEO-Location", required = false) String psUGEOLocation, @ApiParam(value = "\"User-Agent\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-User-Agent", required = false) String psUUserAgent, @ApiParam(value = "\"Referer\" header field sent by the PSU terminal when connecting to the TPP. Notice that an initial typo in RFC 1945 specifies that \"referer\" (incorrect spelling) is to be used. The correct spelling \"referrer\" can be used but might not be understood. ") @RequestHeader(value = "PSU-Referer", required = false) String psUReferer, @ApiParam(value = "\"Accept\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept", required = false) String psUAccept, @ApiParam(value = "\"Accept-Charset\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept-Charset", required = false) String psUAcceptCharset, @ApiParam(value = "\"Accept-Encoding\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept-Encoding", required = false) String psUAcceptEncoding, @ApiParam(value = "\"Accept-Language\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept-Language", required = false) String psUAcceptLanguage, @ApiParam(value = "Digest of the body") @RequestHeader(value = "Digest", required = false) String digest);


    @ApiOperation(value = "Initiates of a Payment Request on a PSU account on behalf of a merchant", notes = "The PISP sends a ISO20022 pain.013.014 based structure that specifies the Payment Request that is related to a commercial transaction between a PSU and the merchant. ", response = HalPaymentTransferRequestCreation.class, authorizations = {
        @Authorization(value = "clientCredentials", scopes = {
            @AuthorizationScope(scope = "pisp", description = "Access by a PISP to payments resources")
            })
    }, tags={ "PISP", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Created", response = HalPaymentTransferRequestCreation.class),
        @ApiResponse(code = 400, message = "Invalid status value", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized, authentication failure.", response = ErrorModel.class),
        @ApiResponse(code = 403, message = "Forbidden, authentication successful but access to resource is not allowed.", response = ErrorModel.class),
        @ApiResponse(code = 405, message = "Method Not Allowed.", response = ErrorModel.class),
        @ApiResponse(code = 406, message = "Not Acceptable.", response = ErrorModel.class),
        @ApiResponse(code = 408, message = "Request Timeout.", response = ErrorModel.class),
        @ApiResponse(code = 429, message = "Too many requests.", response = ErrorModel.class),
        @ApiResponse(code = 500, message = "Internal server error.", response = ErrorModel.class),
        @ApiResponse(code = 503, message = "Service unavailable.", response = ErrorModel.class) })

    @RequestMapping(value = "/payment-requests",
        produces = { "application/hal+json; charset=utf-8", "application/json; charset=utf-8" },
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<HalPaymentTransferRequestCreation> paymentRequestsPost(@ApiParam(value = "Access token to be passed as a header", required = true) @RequestHeader(value = "Authorization", required = true) String authorization, @ApiParam(value = "ISO20022 based payment Initiation Request", required = true) @Valid @RequestBody PaymentRequestResource paymentRequest, @ApiParam(value = "http-signature of the request (cf. https://datatracker.ietf.org/doc/draft-cavage-http-signatures/) The keyId part of the header should be formatted as follows   keiId=\"SN=XXX,CA=YYYYYYYYYYYYYYYY\" where   \"XXX\" is the serial number, in hexadecimal without any prefix (like 0x), of the QSEAL certificate whose relevant private key was used for signing   \"YYYYYYYYYYYYYYYY\" is the the Issuer DN, full Distinguished Name of the Certification Authority having issued this certificate HTTP400 will be returned by the server in case of invalid or absent signature ", required = true) @RequestHeader(value = "Signature", required = true) String signature, @ApiParam(value = "Correlation header to be set in a request and retrieved in the relevant response ", required = true) @RequestHeader(value = "X-Request-ID", required = true) String xRequestID, @ApiParam(value = "IP address used by the PSU's terminal when connecting to the TPP") @RequestHeader(value = "PSU-IP-Address", required = false) String psUIPAddress, @ApiParam(value = "IP port used by the PSU's terminal when connecting to the TPP") @RequestHeader(value = "PSU-IP-Port", required = false) String psUIPPort, @ApiParam(value = "Http method for the most relevant PSUâ€™s terminal request to the TTP") @RequestHeader(value = "PSU-HTTP-Method", required = false) String psUHTTPMethod, @ApiParam(value = "Timestamp of the most relevant PSUâ€™s terminal request to the TTP") @RequestHeader(value = "PSU-Date", required = false) String psUDate, @ApiParam(value = "Geographical location of the PSU as provided by the PSU mobile terminal if any to the TPP") @RequestHeader(value = "PSU-GEO-Location", required = false) String psUGEOLocation, @ApiParam(value = "\"User-Agent\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-User-Agent", required = false) String psUUserAgent, @ApiParam(value = "\"Referer\" header field sent by the PSU terminal when connecting to the TPP. Notice that an initial typo in RFC 1945 specifies that \"referer\" (incorrect spelling) is to be used. The correct spelling \"referrer\" can be used but might not be understood. ") @RequestHeader(value = "PSU-Referer", required = false) String psUReferer, @ApiParam(value = "\"Accept\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept", required = false) String psUAccept, @ApiParam(value = "\"Accept-Charset\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept-Charset", required = false) String psUAcceptCharset, @ApiParam(value = "\"Accept-Encoding\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept-Encoding", required = false) String psUAcceptEncoding, @ApiParam(value = "\"Accept-Language\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept-Language", required = false) String psUAcceptLanguage, @ApiParam(value = "Digest of the body") @RequestHeader(value = "Digest", required = false) String digest);

}
