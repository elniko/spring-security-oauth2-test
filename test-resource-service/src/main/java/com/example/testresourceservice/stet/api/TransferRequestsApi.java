/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.example.testresourceservice.stet.api;

import com.example.testresourceservice.stet.model.*;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-08-13T16:28:50.109+02:00")

@Api(value = "transfer-requests", description = "the transfer-requests API")
public interface TransferRequestsApi {

    @ApiOperation(value = "The PISP confirms its Transfer Request", notes = "The PISP confirms the previously posted Transfer Request.  The ASPSP answers with a status of the relevant request. ", response = HalTransferRequest.class, authorizations = {
        @Authorization(value = "clientCredentials", scopes = {
            @AuthorizationScope(scope = "pisp", description = "Access by a PISP to payments resources")
            })
    }, tags={ "PISP", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "retrieval of the Transfer Request enriched with the status report", response = HalTransferRequest.class),
        @ApiResponse(code = 400, message = "Invalid status value", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized, authentication failure.", response = ErrorModel.class),
        @ApiResponse(code = 403, message = "Forbidden, authentication successful but access to resource is not allowed.", response = ErrorModel.class),
        @ApiResponse(code = 405, message = "Method Not Allowed.", response = ErrorModel.class),
        @ApiResponse(code = 406, message = "Not Acceptable.", response = ErrorModel.class),
        @ApiResponse(code = 408, message = "Request Timeout.", response = ErrorModel.class),
        @ApiResponse(code = 429, message = "Too many requests.", response = ErrorModel.class),
        @ApiResponse(code = 500, message = "Internal server error.", response = ErrorModel.class),
        @ApiResponse(code = 503, message = "Service unavailable.", response = ErrorModel.class) })
    
    @RequestMapping(value = "/transfer-requests/{transferRequestResourceId}/confirmation",
        produces = { "application/hal+json; charset=utf-8", "application/json; charset=utf-8" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<HalTransferRequest> transferRequestsConfirmationPost(@ApiParam(value = "Access token to be passed as a header", required = true) @RequestHeader(value = "Authorization", required = true) String authorization, @ApiParam(value = "Identification of the Transfer Request Resource", required = true) @PathVariable("transferRequestResourceId") String transferRequestResourceId, @ApiParam(value = "http-signature of the request (cf. https://datatracker.ietf.org/doc/draft-cavage-http-signatures/) The keyId part of the header should be formatted as follows   keiId=\"SN=XXX,CA=YYYYYYYYYYYYYYYY\" where   \"XXX\" is the serial number, in hexadecimal without any prefix (like 0x), of the QSEAL certificate whose relevant private key was used for signing   \"YYYYYYYYYYYYYYYY\" is the the Issuer DN, full Distinguished Name of the Certification Authority having issued this certificate HTTP400 will be returned by the server in case of invalid or absent signature ", required = true) @RequestHeader(value = "Signature", required = true) String signature, @ApiParam(value = "Correlation header to be set in a request and retrieved in the relevant response ", required = true) @RequestHeader(value = "X-Request-ID", required = true) String xRequestID, @ApiParam(value = "parameters needed for confirmation of the Payment or Transfer Request, especially in EMBEDDED approach") @Valid @RequestBody PaymentTransferRequestConfirmationResource confirmationRequest, @ApiParam(value = "IP address used by the PSU's terminal when connecting to the TPP") @RequestHeader(value = "PSU-IP-Address", required = false) String psUIPAddress, @ApiParam(value = "IP port used by the PSU's terminal when connecting to the TPP") @RequestHeader(value = "PSU-IP-Port", required = false) String psUIPPort, @ApiParam(value = "Http method for the most relevant PSUâ€™s terminal request to the TTP") @RequestHeader(value = "PSU-HTTP-Method", required = false) String psUHTTPMethod, @ApiParam(value = "Timestamp of the most relevant PSUâ€™s terminal request to the TTP") @RequestHeader(value = "PSU-Date", required = false) String psUDate, @ApiParam(value = "Geographical location of the PSU as provided by the PSU mobile terminal if any to the TPP") @RequestHeader(value = "PSU-GEO-Location", required = false) String psUGEOLocation, @ApiParam(value = "\"User-Agent\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-User-Agent", required = false) String psUUserAgent, @ApiParam(value = "\"Referer\" header field sent by the PSU terminal when connecting to the TPP. Notice that an initial typo in RFC 1945 specifies that \"referer\" (incorrect spelling) is to be used. The correct spelling \"referrer\" can be used but might not be understood. ") @RequestHeader(value = "PSU-Referer", required = false) String psUReferer, @ApiParam(value = "\"Accept\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept", required = false) String psUAccept, @ApiParam(value = "\"Accept-Charset\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept-Charset", required = false) String psUAcceptCharset, @ApiParam(value = "\"Accept-Encoding\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept-Encoding", required = false) String psUAcceptEncoding, @ApiParam(value = "\"Accept-Language\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept-Language", required = false) String psUAcceptLanguage, @ApiParam(value = "Digest of the body") @RequestHeader(value = "Digest", required = false) String digest);


    @ApiOperation(value = "retrieves a transfer previously posted from a PSU account", notes = "The PISP has sent a Transfer Request through a POST command. The ASPSP has registered the Transfer Request, updated if necessary the relevant identifiers in order to avoid duplicates and returned the location of the updated Transfer Request. The PISP get the Transfer Request that might have been updated with the resource identifiers, the status of the Transfer Request and the status of the subsequent credit transfer. ", response = HalTransferRequest.class, authorizations = {
        @Authorization(value = "clientCredentials", scopes = {
            @AuthorizationScope(scope = "pisp", description = "Access by a PISP to payments resources")
            })
    }, tags={ "PISP", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "retrieval of the previously posted Transfer Request", response = HalTransferRequest.class),
        @ApiResponse(code = 400, message = "Invalid status value", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized, authentication failure.", response = ErrorModel.class),
        @ApiResponse(code = 403, message = "Forbidden, authentication successful but access to resource is not allowed.", response = ErrorModel.class),
        @ApiResponse(code = 404, message = "Not found, no request available.", response = ErrorModel.class),
        @ApiResponse(code = 405, message = "Method Not Allowed.", response = ErrorModel.class),
        @ApiResponse(code = 406, message = "Not Acceptable.", response = ErrorModel.class),
        @ApiResponse(code = 408, message = "Request Timeout.", response = ErrorModel.class),
        @ApiResponse(code = 429, message = "Too many requests.", response = ErrorModel.class),
        @ApiResponse(code = 500, message = "Internal server error.", response = ErrorModel.class),
        @ApiResponse(code = 503, message = "Service unavailable.", response = ErrorModel.class) })

    @RequestMapping(value = "/transfer-requests/{transferRequestResourceId}",
        produces = { "application/hal+json; charset=utf-8", "application/json; charset=utf-8" },
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<HalTransferRequest> transferRequestsGet(@ApiParam(value = "Access token to be passed as a header", required = true) @RequestHeader(value = "Authorization", required = true) String authorization, @ApiParam(value = "Identification of the Transfer Request Resource", required = true) @PathVariable("transferRequestResourceId") String transferRequestResourceId, @ApiParam(value = "http-signature of the request (cf. https://datatracker.ietf.org/doc/draft-cavage-http-signatures/) The keyId part of the header should be formatted as follows   keiId=\"SN=XXX,CA=YYYYYYYYYYYYYYYY\" where   \"XXX\" is the serial number, in hexadecimal without any prefix (like 0x), of the QSEAL certificate whose relevant private key was used for signing   \"YYYYYYYYYYYYYYYY\" is the the Issuer DN, full Distinguished Name of the Certification Authority having issued this certificate HTTP400 will be returned by the server in case of invalid or absent signature ", required = true) @RequestHeader(value = "Signature", required = true) String signature, @ApiParam(value = "Correlation header to be set in a request and retrieved in the relevant response ", required = true) @RequestHeader(value = "X-Request-ID", required = true) String xRequestID, @ApiParam(value = "IP address used by the PSU's terminal when connecting to the TPP") @RequestHeader(value = "PSU-IP-Address", required = false) String psUIPAddress, @ApiParam(value = "IP port used by the PSU's terminal when connecting to the TPP") @RequestHeader(value = "PSU-IP-Port", required = false) String psUIPPort, @ApiParam(value = "Http method for the most relevant PSUâ€™s terminal request to the TTP") @RequestHeader(value = "PSU-HTTP-Method", required = false) String psUHTTPMethod, @ApiParam(value = "Timestamp of the most relevant PSUâ€™s terminal request to the TTP") @RequestHeader(value = "PSU-Date", required = false) String psUDate, @ApiParam(value = "Geographical location of the PSU as provided by the PSU mobile terminal if any to the TPP") @RequestHeader(value = "PSU-GEO-Location", required = false) String psUGEOLocation, @ApiParam(value = "\"User-Agent\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-User-Agent", required = false) String psUUserAgent, @ApiParam(value = "\"Referer\" header field sent by the PSU terminal when connecting to the TPP. Notice that an initial typo in RFC 1945 specifies that \"referer\" (incorrect spelling) is to be used. The correct spelling \"referrer\" can be used but might not be understood. ") @RequestHeader(value = "PSU-Referer", required = false) String psUReferer, @ApiParam(value = "\"Accept\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept", required = false) String psUAccept, @ApiParam(value = "\"Accept-Charset\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept-Charset", required = false) String psUAcceptCharset, @ApiParam(value = "\"Accept-Encoding\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept-Encoding", required = false) String psUAcceptEncoding, @ApiParam(value = "\"Accept-Language\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept-Language", required = false) String psUAcceptLanguage, @ApiParam(value = "Digest of the body") @RequestHeader(value = "Digest", required = false) String digest);


    @ApiOperation(value = "Initiates a transfers from a PSU account", notes = "The PISP sends a simple Transfer Request from a PSU account. ", response = HalPaymentTransferRequestCreation.class, authorizations = {
        @Authorization(value = "clientCredentials", scopes = {
            @AuthorizationScope(scope = "pisp", description = "Access by a PISP to payments resources")
            })
    }, tags={ "PISP", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Created", response = HalPaymentTransferRequestCreation.class),
        @ApiResponse(code = 400, message = "Invalid status value", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized, authentication failure.", response = ErrorModel.class),
        @ApiResponse(code = 403, message = "Forbidden, authentication successful but access to resource is not allowed.", response = ErrorModel.class),
        @ApiResponse(code = 405, message = "Method Not Allowed.", response = ErrorModel.class),
        @ApiResponse(code = 406, message = "Not Acceptable.", response = ErrorModel.class),
        @ApiResponse(code = 408, message = "Request Timeout.", response = ErrorModel.class),
        @ApiResponse(code = 429, message = "Too many requests.", response = ErrorModel.class),
        @ApiResponse(code = 500, message = "Internal server error.", response = ErrorModel.class),
        @ApiResponse(code = 503, message = "Service unavailable.", response = ErrorModel.class) })

    @RequestMapping(value = "/transfer-requests",
        produces = { "application/hal+json; charset=utf-8", "application/json; charset=utf-8" },
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<HalPaymentTransferRequestCreation> transferRequestsPost(@ApiParam(value = "Access token to be passed as a header", required = true) @RequestHeader(value = "Authorization", required = true) String authorization, @ApiParam(value = "ISO20022 based payment Initiation Request", required = true) @Valid @RequestBody TransferRequestResource transferRequest, @ApiParam(value = "http-signature of the request (cf. https://datatracker.ietf.org/doc/draft-cavage-http-signatures/) The keyId part of the header should be formatted as follows   keiId=\"SN=XXX,CA=YYYYYYYYYYYYYYYY\" where   \"XXX\" is the serial number, in hexadecimal without any prefix (like 0x), of the QSEAL certificate whose relevant private key was used for signing   \"YYYYYYYYYYYYYYYY\" is the the Issuer DN, full Distinguished Name of the Certification Authority having issued this certificate HTTP400 will be returned by the server in case of invalid or absent signature ", required = true) @RequestHeader(value = "Signature", required = true) String signature, @ApiParam(value = "Correlation header to be set in a request and retrieved in the relevant response ", required = true) @RequestHeader(value = "X-Request-ID", required = true) String xRequestID, @ApiParam(value = "IP address used by the PSU's terminal when connecting to the TPP") @RequestHeader(value = "PSU-IP-Address", required = false) String psUIPAddress, @ApiParam(value = "IP port used by the PSU's terminal when connecting to the TPP") @RequestHeader(value = "PSU-IP-Port", required = false) String psUIPPort, @ApiParam(value = "Http method for the most relevant PSUâ€™s terminal request to the TTP") @RequestHeader(value = "PSU-HTTP-Method", required = false) String psUHTTPMethod, @ApiParam(value = "Timestamp of the most relevant PSUâ€™s terminal request to the TTP") @RequestHeader(value = "PSU-Date", required = false) String psUDate, @ApiParam(value = "Geographical location of the PSU as provided by the PSU mobile terminal if any to the TPP") @RequestHeader(value = "PSU-GEO-Location", required = false) String psUGEOLocation, @ApiParam(value = "\"User-Agent\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-User-Agent", required = false) String psUUserAgent, @ApiParam(value = "\"Referer\" header field sent by the PSU terminal when connecting to the TPP. Notice that an initial typo in RFC 1945 specifies that \"referer\" (incorrect spelling) is to be used. The correct spelling \"referrer\" can be used but might not be understood. ") @RequestHeader(value = "PSU-Referer", required = false) String psUReferer, @ApiParam(value = "\"Accept\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept", required = false) String psUAccept, @ApiParam(value = "\"Accept-Charset\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept-Charset", required = false) String psUAcceptCharset, @ApiParam(value = "\"Accept-Encoding\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept-Encoding", required = false) String psUAcceptEncoding, @ApiParam(value = "\"Accept-Language\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept-Language", required = false) String psUAcceptLanguage, @ApiParam(value = "Digest of the body") @RequestHeader(value = "Digest", required = false) String digest);

}
