/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.example.testresourceservice.stet.api;

import com.example.testresourceservice.stet.model.ErrorModel;
import com.example.testresourceservice.stet.model.HalAccounts;
import com.example.testresourceservice.stet.model.HalBalances;
import com.example.testresourceservice.stet.model.HalTransactions;
import io.swagger.annotations.*;
import org.joda.time.DateTime;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.constraints.Size;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-08-13T16:28:50.109+02:00")

@Api(value = "accounts", description = "the accounts API")
public interface AccountsApi {

    @ApiOperation(value = "Get authorized account balances", notes = "Returns a set of balances for a given PSU account that is specified by the AISP through an account resource Identification - The ASPSP must provide at least  the accounting balance on the account. - The ASPSP can provide other balance restitutions, e.g. instant balance, as well, if possible. ", response = HalBalances.class, authorizations = {
        @Authorization(value = "accessCode", scopes = {
            @AuthorizationScope(scope = "aisp", description = "Access by a AISP to one given PSU&#39;s account")
            }),
        @Authorization(value = "resourceOwnerIdentification", scopes = {
            @AuthorizationScope(scope = "aisp", description = "Access by a AISP to one given PSU&#39;s account")
            })
    }, tags={ "AISP", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The ASPSP answers with a list of account balances", response = HalBalances.class),
        @ApiResponse(code = 204, message = "No content.", response = Void.class),
        @ApiResponse(code = 400, message = "Invalid status value", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized, authentication failure.", response = ErrorModel.class),
        @ApiResponse(code = 403, message = "Forbidden, authentication successful but access to resource is not allowed.", response = ErrorModel.class),
        @ApiResponse(code = 404, message = "Not found, no account available.", response = ErrorModel.class),
        @ApiResponse(code = 405, message = "Method Not Allowed.", response = ErrorModel.class),
        @ApiResponse(code = 406, message = "Not Acceptable.", response = ErrorModel.class),
        @ApiResponse(code = 408, message = "Request Timeout.", response = ErrorModel.class),
        @ApiResponse(code = 429, message = "Too many requests.", response = ErrorModel.class),
        @ApiResponse(code = 500, message = "Internal server error.", response = ErrorModel.class),
        @ApiResponse(code = 503, message = "Service unavailable.", response = ErrorModel.class) })
    
    @RequestMapping(value = "/accounts/{accountResourceId}/balances",
        produces = { "application/hal+json; charset=utf-8", "application/json; charset=utf-8" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<HalBalances> accountsBalancesGet(@ApiParam(value = "Access token to be passed as a header", required = true) @RequestHeader(value = "Authorization", required = true) String authorization, @ApiParam(value = "Identification of account resource to fetch", required = true) @PathVariable("accountResourceId") String accountResourceId, @ApiParam(value = "This header specifies which party has been mandated by the PSU for guaranteeing the respect of the PSU's choices on accessibility scope on each individual account. The AISP must use one the following values - BY-AISP: means that the AISP has been mandated by the PSU on the detailed account access management. Thus the ASPSP is not obliged to check whether or not a given AISP request is authorized. - BY-ASPSP: means that the ASPSP is obliged to guarantee the respect of the detailed account access grants given by the PSU to the AISP and thus to check every request from the AISP. ", required = true, allowableValues = "BY-AISP, BY-ASPSP") @RequestHeader(value = "PSU-Account-Consent-Responsibility", required = true) String psUAccountConsentResponsibility, @ApiParam(value = "http-signature of the request (cf. https://datatracker.ietf.org/doc/draft-cavage-http-signatures/) The keyId part of the header should be formatted as follows   keiId=\"SN=XXX,CA=YYYYYYYYYYYYYYYY\" where   \"XXX\" is the serial number, in hexadecimal without any prefix (like 0x), of the QSEAL certificate whose relevant private key was used for signing   \"YYYYYYYYYYYYYYYY\" is the the Issuer DN, full Distinguished Name of the Certification Authority having issued this certificate HTTP400 will be returned by the server in case of invalid or absent signature ", required = true) @RequestHeader(value = "Signature", required = true) String signature, @ApiParam(value = "Correlation header to be set in a request and retrieved in the relevant response ", required = true) @RequestHeader(value = "X-Request-ID", required = true) String xRequestID, @ApiParam(value = "IP address used by the PSU's terminal when connecting to the TPP") @RequestHeader(value = "PSU-IP-Address", required = false) String psUIPAddress, @ApiParam(value = "IP port used by the PSU's terminal when connecting to the TPP") @RequestHeader(value = "PSU-IP-Port", required = false) String psUIPPort, @ApiParam(value = "Http method for the most relevant PSUâ€™s terminal request to the TTP") @RequestHeader(value = "PSU-HTTP-Method", required = false) String psUHTTPMethod, @ApiParam(value = "Timestamp of the most relevant PSUâ€™s terminal request to the TTP") @RequestHeader(value = "PSU-Date", required = false) String psUDate, @ApiParam(value = "Geographical location of the PSU as provided by the PSU mobile terminal if any to the TPP") @RequestHeader(value = "PSU-GEO-Location", required = false) String psUGEOLocation, @ApiParam(value = "\"User-Agent\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-User-Agent", required = false) String psUUserAgent, @ApiParam(value = "\"Referer\" header field sent by the PSU terminal when connecting to the TPP. Notice that an initial typo in RFC 1945 specifies that \"referer\" (incorrect spelling) is to be used. The correct spelling \"referrer\" can be used but might not be understood. ") @RequestHeader(value = "PSU-Referer", required = false) String psUReferer, @ApiParam(value = "\"Accept\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept", required = false) String psUAccept, @ApiParam(value = "\"Accept-Charset\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept-Charset", required = false) String psUAcceptCharset, @ApiParam(value = "\"Accept-Encoding\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept-Encoding", required = false) String psUAcceptEncoding, @ApiParam(value = "\"Accept-Language\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept-Language", required = false) String psUAcceptLanguage, @ApiParam(value = "Digest of the body") @RequestHeader(value = "Digest", required = false) String digest);


    @ApiOperation(value = "Gets the psu context, i.e. the detailed authorizations given by the PSU to the AISP.", notes = "Returns all accounts that the PSU made accessible to the TPP.  Thanks to HYPERMEDIA, each account is returned with the links aiming to ease access to the relevant transactions and balances.  The ASPSP takes into account the access token that establishes the link between the PSU and the AISP.  The result may be subject to pagination (i.e. retrieving a partial result in case of having too many results) through a set of pages by the ASPSP. Thereafter, the AISP may ask for the first, next, previous or last page of results. ", response = HalAccounts.class, authorizations = {
        @Authorization(value = "accessCode", scopes = {
            @AuthorizationScope(scope = "aisp", description = "Access by a AISP to one given PSU&#39;s account")
            }),
        @Authorization(value = "resourceOwnerIdentification", scopes = {
            @AuthorizationScope(scope = "aisp", description = "Access by a AISP to one given PSU&#39;s account")
            })
    }, tags={ "AISP", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "The ASPSP return a PSU context - listing the accounts that have been made available to the AISP by the PSU and, - for each of these accounts, the further transactions that have been enabled by the PSU through HYPERMEDIA links. ", response = HalAccounts.class),
        @ApiResponse(code = 204, message = "No content.", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized, authentication failure.", response = ErrorModel.class),
        @ApiResponse(code = 403, message = "Forbidden, authentication successful but access to resource is not allowed.", response = ErrorModel.class),
        @ApiResponse(code = 404, message = "Not found, no account available.", response = ErrorModel.class),
        @ApiResponse(code = 405, message = "Method Not Allowed.", response = ErrorModel.class),
        @ApiResponse(code = 406, message = "Not Acceptable.", response = ErrorModel.class),
        @ApiResponse(code = 408, message = "Request Timeout.", response = ErrorModel.class),
        @ApiResponse(code = 429, message = "Too many requests.", response = ErrorModel.class),
        @ApiResponse(code = 500, message = "Internal server error.", response = ErrorModel.class),
        @ApiResponse(code = 503, message = "Service unavailable.", response = ErrorModel.class) })

    @RequestMapping(value = "/accounts",
        produces = { "application/hal+json; charset=utf-8", "application/json; charset=utf-8" },
        method = RequestMethod.GET)
    ResponseEntity<HalAccounts> accountsGet(@ApiParam(value = "Access token to be passed as a header", required = true) @RequestHeader(value = "Authorization", required = true) String authorization, @ApiParam(value = "This header specifies which party has been mandated by the PSU for guaranteeing the respect of the PSU's choices on accessibility scope on each individual account. The AISP must use one the following values - BY-AISP: means that the AISP has been mandated by the PSU on the detailed account access management. Thus the ASPSP is not obliged to check whether or not a given AISP request is authorized. - BY-ASPSP: means that the ASPSP is obliged to guarantee the respect of the detailed account access grants given by the PSU to the AISP and thus to check every request from the AISP. ", required = true, allowableValues = "BY-AISP, BY-ASPSP") @RequestHeader(value = "PSU-Account-Consent-Responsibility", required = true) String psUAccountConsentResponsibility, @ApiParam(value = "http-signature of the request (cf. https://datatracker.ietf.org/doc/draft-cavage-http-signatures/) The keyId part of the header should be formatted as follows   keiId=\"SN=XXX,CA=YYYYYYYYYYYYYYYY\" where   \"XXX\" is the serial number, in hexadecimal without any prefix (like 0x), of the QSEAL certificate whose relevant private key was used for signing   \"YYYYYYYYYYYYYYYY\" is the the Issuer DN, full Distinguished Name of the Certification Authority having issued this certificate HTTP400 will be returned by the server in case of invalid or absent signature ", required = true) @RequestHeader(value = "Signature", required = true) String signature, @ApiParam(value = "Correlation header to be set in a request and retrieved in the relevant response ", required = true) @RequestHeader(value = "X-Request-ID", required = true) String xRequestID, @ApiParam(value = "IP address used by the PSU's terminal when connecting to the TPP") @RequestHeader(value = "PSU-IP-Address", required = false) String psUIPAddress, @ApiParam(value = "IP port used by the PSU's terminal when connecting to the TPP") @RequestHeader(value = "PSU-IP-Port", required = false) String psUIPPort, @ApiParam(value = "Http method for the most relevant PSUâ€™s terminal request to the TTP") @RequestHeader(value = "PSU-HTTP-Method", required = false) String psUHTTPMethod, @ApiParam(value = "Timestamp of the most relevant PSUâ€™s terminal request to the TTP") @RequestHeader(value = "PSU-Date", required = false) String psUDate, @ApiParam(value = "Geographical location of the PSU as provided by the PSU mobile terminal if any to the TPP") @RequestHeader(value = "PSU-GEO-Location", required = false) String psUGEOLocation, @ApiParam(value = "\"User-Agent\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-User-Agent", required = false) String psUUserAgent, @ApiParam(value = "\"Referer\" header field sent by the PSU terminal when connecting to the TPP. Notice that an initial typo in RFC 1945 specifies that \"referer\" (incorrect spelling) is to be used. The correct spelling \"referrer\" can be used but might not be understood. ") @RequestHeader(value = "PSU-Referer", required = false) String psUReferer, @ApiParam(value = "\"Accept\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept", required = false) String psUAccept, @ApiParam(value = "\"Accept-Charset\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept-Charset", required = false) String psUAcceptCharset, @ApiParam(value = "\"Accept-Encoding\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept-Encoding", required = false) String psUAcceptEncoding, @ApiParam(value = "\"Accept-Language\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept-Language", required = false) String psUAcceptLanguage, @ApiParam(value = "Digest of the body") @RequestHeader(value = "Digest", required = false) String digest);


    @ApiOperation(value = "Get transactions for an authorized account", notes = "Returns transactions for an account for a given PSU account that is specified by the AISP through an account resource identification. The request may use some filter parameter in order to restrict the query - on a given imputation date range - past a given incremental technical identification  The result may be subject to pagination (i.e. retrieving a partial result in case of having too many results) through a set of pages by the ASPSP. Thereafter, the AISP may ask for the first, next, previous or last page of results. ", response = HalTransactions.class, authorizations = {
        @Authorization(value = "accessCode", scopes = {
            @AuthorizationScope(scope = "aisp", description = "Access by a AISP to one given PSU&#39;s account")
            }),
        @Authorization(value = "resourceOwnerIdentification", scopes = {
            @AuthorizationScope(scope = "aisp", description = "Access by a AISP to one given PSU&#39;s account")
            })
    }, tags={ "AISP", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Complete transactions response", response = HalTransactions.class),
        @ApiResponse(code = 204, message = "No content.", response = Void.class),
        @ApiResponse(code = 400, message = "Invalid status value", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized, authentication failure.", response = ErrorModel.class),
        @ApiResponse(code = 403, message = "Forbidden, authentication successful but access to resource is not allowed.", response = ErrorModel.class),
        @ApiResponse(code = 404, message = "Not found, no account available.", response = ErrorModel.class),
        @ApiResponse(code = 405, message = "Method Not Allowed.", response = ErrorModel.class),
        @ApiResponse(code = 406, message = "Not Acceptable.", response = ErrorModel.class),
        @ApiResponse(code = 408, message = "Request Timeout.", response = ErrorModel.class),
        @ApiResponse(code = 429, message = "Too many requests.", response = ErrorModel.class),
        @ApiResponse(code = 500, message = "Internal server error.", response = ErrorModel.class),
        @ApiResponse(code = 503, message = "Service unavailable.", response = ErrorModel.class) })

    @RequestMapping(value = "/accounts/{accountResourceId}/transactions",
        produces = { "application/hal+json; charset=utf-8", "application/json; charset=utf-8" },
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<HalTransactions> accountsTransactionsGet(@ApiParam(value = "Access token to be passed as a header", required = true) @RequestHeader(value = "Authorization", required = true) String authorization, @ApiParam(value = "Identification of account resource to fetch", required = true) @PathVariable("accountResourceId") String accountResourceId, @ApiParam(value = "This header specifies which party has been mandated by the PSU for guaranteeing the respect of the PSU's choices on accessibility scope on each individual account. The AISP must use one the following values - BY-AISP: means that the AISP has been mandated by the PSU on the detailed account access management. Thus the ASPSP is not obliged to check whether or not a given AISP request is authorized. - BY-ASPSP: means that the ASPSP is obliged to guarantee the respect of the detailed account access grants given by the PSU to the AISP and thus to check every request from the AISP. ", required = true, allowableValues = "BY-AISP, BY-ASPSP") @RequestHeader(value = "PSU-Account-Consent-Responsibility", required = true) String psUAccountConsentResponsibility, @ApiParam(value = "http-signature of the request (cf. https://datatracker.ietf.org/doc/draft-cavage-http-signatures/) The keyId part of the header should be formatted as follows   keiId=\"SN=XXX,CA=YYYYYYYYYYYYYYYY\" where   \"XXX\" is the serial number, in hexadecimal without any prefix (like 0x), of the QSEAL certificate whose relevant private key was used for signing   \"YYYYYYYYYYYYYYYY\" is the the Issuer DN, full Distinguished Name of the Certification Authority having issued this certificate HTTP400 will be returned by the server in case of invalid or absent signature ", required = true) @RequestHeader(value = "Signature", required = true) String signature, @ApiParam(value = "Correlation header to be set in a request and retrieved in the relevant response ", required = true) @RequestHeader(value = "X-Request-ID", required = true) String xRequestID, @ApiParam(value = "Inclusive minimal imputation date of the transactions.  Transactions having an imputation date equal to this parameter are included within the result. ") @RequestParam(value = "dateTo", required = false) DateTime dateTo, @ApiParam(value = "Exclusive maximal imputation date of the transactions.  Transactions having an imputation date equal to this parameter are not included within the result. ") @RequestParam(value = "dateFrom", required = false) DateTime dateFrom, @Size(max = 16) @ApiParam(value = "Specifies the value on which the result has to be computed.  Only the transaction having a technical identification greater than this value must be included within the result ") @RequestParam(value = "afterEntryReference", required = false) String afterEntryReference, @ApiParam(value = "IP address used by the PSU's terminal when connecting to the TPP") @RequestHeader(value = "PSU-IP-Address", required = false) String psUIPAddress, @ApiParam(value = "IP port used by the PSU's terminal when connecting to the TPP") @RequestHeader(value = "PSU-IP-Port", required = false) String psUIPPort, @ApiParam(value = "Http method for the most relevant PSUâ€™s terminal request to the TTP") @RequestHeader(value = "PSU-HTTP-Method", required = false) String psUHTTPMethod, @ApiParam(value = "Timestamp of the most relevant PSUâ€™s terminal request to the TTP") @RequestHeader(value = "PSU-Date", required = false) String psUDate, @ApiParam(value = "Geographical location of the PSU as provided by the PSU mobile terminal if any to the TPP") @RequestHeader(value = "PSU-GEO-Location", required = false) String psUGEOLocation, @ApiParam(value = "\"User-Agent\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-User-Agent", required = false) String psUUserAgent, @ApiParam(value = "\"Referer\" header field sent by the PSU terminal when connecting to the TPP. Notice that an initial typo in RFC 1945 specifies that \"referer\" (incorrect spelling) is to be used. The correct spelling \"referrer\" can be used but might not be understood. ") @RequestHeader(value = "PSU-Referer", required = false) String psUReferer, @ApiParam(value = "\"Accept\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept", required = false) String psUAccept, @ApiParam(value = "\"Accept-Charset\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept-Charset", required = false) String psUAcceptCharset, @ApiParam(value = "\"Accept-Encoding\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept-Encoding", required = false) String psUAcceptEncoding, @ApiParam(value = "\"Accept-Language\" header field sent by the PSU terminal when connecting to the TPP ") @RequestHeader(value = "PSU-Accept-Language", required = false) String psUAcceptLanguage, @ApiParam(value = "Digest of the body") @RequestHeader(value = "Digest", required = false) String digest);

}
